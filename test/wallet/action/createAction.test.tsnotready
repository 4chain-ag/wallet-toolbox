/* eslint-disable @typescript-eslint/no-unused-vars */
import { sdk, WalletError, WERR_INTERNAL, WERR_INVALID_PARAMETER } from '@babbage/sdk-ts'
import { _tu, CreateCloudNinjaResult } from '../utils/testUtils';
import { NinjaWallet } from '@cwi/ninja-wallet'
import { Beef, P2PKH, PrivateKey, PublicKey, Transaction } from '@bsv/sdk';

const noLog = false

describe('createAction test', () => {
    jest.setTimeout(99999999)

    const amount = 1319
    const env = _tu.getEnv('test')
    const testName = () => expect.getState().currentTestName || 'test'

    let ccnr: CreateCloudNinjaResult

    beforeAll(async () => {
        ccnr = await _tu.createCloudNinja(env.chain, env.devKeys[env.identityKey])
    })

    afterAll(async () => {
        await ccnr.dojo.destroy()
    })
    test('1_invalid_params', async () => {
        const wallet = new NinjaWallet(ccnr.ninja)

        {
            const log = `\n${testName()}\n`
            const args: sdk.CreateActionArgs = {
                description: ''
            }
            // description is too short...
            await expectToThrowWERR(WERR_INVALID_PARAMETER, () => wallet.createAction(args))
            args.description = 'five.'
            // no outputs, inputs or sendWith
            await expectToThrowWERR(WERR_INVALID_PARAMETER, () => wallet.createAction(args))
            args.options = { signAndProcess: false }
            args.outputs = [{ satoshis: 42, lockingScript: 'fred', outputDescription: 'pay fred'}]
            // lockingScript must be hexadecimal
            await expectToThrowWERR(WERR_INVALID_PARAMETER, () => wallet.createAction(args))
            args.outputs[0].lockingScript = 'fre'
            // lockingScript must be even length
            await expectToThrowWERR(WERR_INVALID_PARAMETER, () => wallet.createAction(args))
            if (!noLog) console.log(log)
        }
    })

    test('2_signableTransaction', async () => {
        const log = `\n${testName()}\n`
        const wallet = new NinjaWallet(ccnr.ninja)
        const root = '02135476'
        const kp = getKeyPair(root.repeat(8))

        let txid1: string
        let txid2: string
        const outputSatoshis = 42
        let noSendChange: string[] | undefined

        {
            const createArgs: sdk.CreateActionArgs = {
                description: `${kp.address} of ${root}`,
                outputs: [
                    { satoshis: outputSatoshis, lockingScript: getLockP2PKH(kp.address).toHex(), outputDescription: 'pay fred' }
                ],
                options: {
                    randomizeOutputs: false,
                    signAndProcess: false,
                    noSend: true
                }
            }

            const cr = await wallet.createAction(createArgs)
            noSendChange = cr.noSendChange

            expect(cr.noSendChange).toBeTruthy()
            expect(cr.sendWithResults).toBeUndefined()
            expect(cr.tx).toBeUndefined()
            expect(cr.txid).toBeUndefined()

            expect(cr.signableTransaction).toBeTruthy()
            const st = cr.signableTransaction!
            expect(st.reference).toBeTruthy()
            // const tx = Transaction.fromAtomicBEEF(st.tx) // Transaction doesn't support V2 Beef yet.
            const atomicBeef = Beef.fromBinary(st.tx)
            const tx = atomicBeef.txs[atomicBeef.txs.length - 1].tx
            for (const input of tx.inputs) {
                expect(atomicBeef.findTxid(input.sourceTXID!)).toBeTruthy()
            }

            // Spending authorization check happens here...
            //expect(st.amount > 242 && st.amount < 300).toBe(true)

            // sign and complete
            const signArgs: sdk.SignActionArgs = {
                reference: st.reference,
                spends: {},
                options: {
                    returnTXIDOnly: true,
                    noSend: true,
                }
            }

            const sr = await wallet.signAction(signArgs)

            txid1 = sr.txid!
            // Update the noSendChange txid to final signed value.
            noSendChange = noSendChange!.map(op => `${txid1}.${op.split('.')[1]}`)
        }

        {
            const unlock = getUnlockP2PKH(kp.privateKey, outputSatoshis)
            const unlockingScriptLength = await unlock.estimateLength()

            const createArgs: sdk.CreateActionArgs = {
                description: `${kp.address} of ${root}`,
                inputs: [
                    {
                        outpoint: `${txid1}.0`,
                        inputDescription: 'spend ${kp.address} of ${root}',
                        unlockingScriptLength
                    }
                ],
                options: {
                    noSendChange,
                    // signAndProcess: false, // Not required as an input lacks unlock script...  
                    noSend: true
                }
            }

            const cr = await wallet.createAction(createArgs)

            expect(cr.noSendChange).toBeTruthy()
            expect(cr.sendWithResults).toBeUndefined()
            expect(cr.tx).toBeUndefined()
            expect(cr.txid).toBeUndefined()
            expect(cr.signableTransaction).toBeTruthy()
            const st = cr.signableTransaction!
            expect(st.reference).toBeTruthy()
            const atomicBeef = Beef.fromBinary(st.tx)
            const tx = atomicBeef.txs[atomicBeef.txs.length - 1].tx

            tx.inputs[0].unlockingScriptTemplate = unlock
            await tx.sign()
            const unlockingScript = tx.inputs[0].unlockingScript!.toHex()

            const signArgs: sdk.SignActionArgs = {
                reference: st.reference,
                spends: { 0: { unlockingScript } },
                options: {
                    returnTXIDOnly: true,
                    noSend: true,
                }
            }

            const sr = await wallet.signAction(signArgs)

            txid2 = sr.txid!
        }
        {

            const createArgs: sdk.CreateActionArgs = {
                description: `${kp.address} of ${root}`,
                options: {
                    sendWith: [ txid1, txid2]
                }
            }

            const cr = await wallet.createAction(createArgs)

            expect(cr.noSendChange).toBeTruthy()
            expect(cr.sendWithResults?.length).toBe(2)
            const [swr1, swr2] = cr.sendWithResults!
            expect(swr1.status !== 'failed').toBe(true)
            expect(swr2.status !== 'failed').toBe(true)
            expect(swr1.txid).toBe(txid1)
            expect(swr2.txid).toBe(txid2)
        }
        if (!noLog) console.log(log)
    })
})

// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function expectToThrowWERR<R>(expectedClass: new (...args: any[]) => any, fn: () => Promise<R>) : Promise<void> {
    try {
        await fn()
    } catch (eu: unknown) {
        const e = WalletError.fromUnknown(eu)
        expect(e.name).toBe(expectedClass.name)
        expect(e.isError).toBe(true)
        return
    }
    throw new Error(`${expectedClass.name} was not thrown`)
}

function getKeyPair(priv?: string | PrivateKey)
{
    if (priv === undefined)
        priv = PrivateKey.fromRandom()
    else if (typeof priv === 'string')
        priv = new PrivateKey(priv, 'hex')

    const pub = PublicKey.fromPrivateKey(priv)
    const address = pub.toAddress()
    return { privateKey: priv, publicKey: pub, address }
}

function getLockP2PKH(address: string) {
    const p2pkh = new P2PKH()
    const lock = p2pkh.lock(address)
    return lock
}

function getUnlockP2PKH(priv: PrivateKey, satoshis: number)
{
    const p2pkh = new P2PKH()
    const lock = getLockP2PKH(getKeyPair(priv).address)
    // Prepare to pay with SIGHASH_ALL and without ANYONE_CAN_PAY.
    // In otherwords:
    // - all outputs must remain in the current order, amount and locking scripts.
    // - all inputs must remain from the current outpoints and sequence numbers.
    // (unlock scripts are never signed)
    const unlock = p2pkh.unlock(priv, "all", false, satoshis, lock)
    return unlock
}
