/* eslint-disable @typescript-eslint/no-unused-vars */

const noLog = true

describe('listActions test', () => {
    jest.setTimeout(99999999)

    const amount = 1319
    const env = _tu.getEnv('test')
    const testName = () => expect.getState().currentTestName || 'test'

    let ccnr: CreateCloudNinjaResult

    beforeAll(async () => {
        ccnr = await _tu.createCloudNinja(env.chain, env.devKeys[env.identityKey])
    })

    afterAll(async () => {
        await ccnr.dojo.destroy()
    })

    test('1_default', async () => {
        const wallet = new NinjaWallet(ccnr.ninja)

        {
            const r = await wallet.listActions({
                labels: []
            })
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(10)
            for (const a of r.actions) {
                expect(a.inputs).toBeUndefined()
                expect(a.outputs).toBeUndefined()
                expect(a.labels).toBeUndefined()
            }
        }
    })

    test('2_includeLabels', async () => {
        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeLabels: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(args.limit || 10)
            let i = 0
            for (const a of r.actions) {
                expect(a.inputs).toBeUndefined()
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.labels)).toBe(true)
                log += `${i++} ${a.labels?.join(',')}\n`
            }
            if (!noLog) console.log(log)
        }
    })

    test('3_label babbage_protocol_perm', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeLabels: true,
                labels: ['babbage_protocol_perm']
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(args.limit || 10)
            let i = 0
            for (const a of r.actions) {
                expect(a.inputs).toBeUndefined()
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.labels)).toBe(true)
                expect(a.labels?.indexOf('babbage_protocol_perm')).toBeGreaterThan(-1)
                log += `${i++} ${a.labels?.join(',')}\n`
            }
            if (!noLog) console.log(log)
        }
    })

    test('4_label babbage_protocol_perm', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeLabels: true,
                labels: ['babbage_protocol_perm']
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(args.limit || 10)
            let i = 0
            for (const a of r.actions) {
                expect(a.inputs).toBeUndefined()
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.labels)).toBe(true)
                for (const label of args.labels) {
                    expect(a.labels?.indexOf(label)).toBeGreaterThan(-1)
                }
                log += `${i++} ${a.labels?.join(',')}\n`
            }
            if (!noLog) console.log(log)
        }
    })

    test('5_label babbage_protocol_perm or babbage_basket_access', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeLabels: true,
                labels: ['babbage_protocol_perm', 'babbage_basket_access']
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(args.limit || 10)
            let i = 0
            for (const a of r.actions) {
                expect(a.inputs).toBeUndefined()
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.labels)).toBe(true)
                let count = 0
                for (const label of args.labels) {
                    if (a.labels!.indexOf(label) > -1) count++
                }
                expect(count).toBeGreaterThan(0)
                log += `${i++} ${a.labels?.join(',')}\n`
            }
            if (!noLog) console.log(log)
        }
    })

    test('6_label babbage_protocol_perm and babbage_basket_access', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeLabels: true,
                labels: ['babbage_protocol_perm', 'babbage_basket_access'],
                labelQueryMode: 'all'
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBe(0)
            if (!noLog) console.log(log)
        }

    })

    test('7_includeOutputs', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeOutputs: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            expect(r.totalActions).toBeGreaterThanOrEqual(r.actions.length)
            expect(r.actions.length).toBe(args.limit || 10)
            let i = 0
            for (const a of r.actions) {
                log += `${i++} ${a.txid} ${a.satoshis} ${a.status} ${a.isOutgoing} ${a.version} ${a.lockTime} ${a.description}\n`
                expect(a.isOutgoing === true || a.isOutgoing === false).toBe(true)
                expect(a.inputs).toBeUndefined()
                expect(Array.isArray(a.outputs)).toBe(true)
                expect(a.labels).toBeUndefined()
                for (const o of a.outputs!) {
                    log += `  ${o.outputIndex} ${o.satoshis} ${o.spendable} ${o.basket} ${o.tags.join(',')} ${o.outputDescription} ${o.customInstructions} ${o.lockingScript}\n`
                    expect(o.outputIndex).toBeGreaterThanOrEqual(0)
                    expect(o.lockingScript).toBeUndefined()
                }
            }
            if (!noLog) console.log(log)
        }
    })

    test('8_includeOutputs and script', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeOutputs: true,
                includeOutputLockingScripts: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            let i = 0
            for (const a of r.actions) {
                log += `${i++} ${a.txid} ${a.satoshis} ${a.status} ${a.isOutgoing} ${a.version} ${a.lockTime} ${a.description}\n`
                for (const o of a.outputs!) {
                    log += `  ${o.outputIndex} script length ${o.lockingScript?.length}\n`
                    expect(o.lockingScript?.length).toBeGreaterThan(0)
                }
            }
            if (!noLog) console.log(log)
        }

    })

    test('9_includeInputs', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeInputs: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            let i = 0
            for (const a of r.actions) {
                log += `${i++} ${a.txid} ${a.satoshis} ${a.status} ${a.isOutgoing} ${a.version} ${a.lockTime} ${a.description}\n`
                expect(a.isOutgoing === true || a.isOutgoing === false).toBe(true)
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.inputs)).toBe(true)
                expect(a.labels).toBeUndefined()
                for (const i of a.inputs!) {
                    log += `  ${i.sourceOutpoint} ${i.sourceSatoshis} ${i.sequenceNumber} ${i.inputDescription}\n`
                    expect(i.sourceLockingScript).toBeUndefined()
                    expect(i.unlockingScript).toBeUndefined()
                }
            }
            if (!noLog) console.log(log)
        }
    })

    test('10_includeInputs and unlock', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeInputs: true,
                includeInputUnlockingScripts: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            let i = 0
            for (const a of r.actions) {
                log += `${i++} ${a.txid} ${a.satoshis} ${a.status} ${a.isOutgoing} ${a.version} ${a.lockTime} ${a.description}\n`
                expect(a.isOutgoing === true || a.isOutgoing === false).toBe(true)
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.inputs)).toBe(true)
                expect(a.labels).toBeUndefined()
                for (const i of a.inputs!) {
                    log += `  ${i.sourceOutpoint}\n`
                    log += `    ${i.unlockingScript?.length} ${i.unlockingScript}\n`
                    expect(i.sourceLockingScript).toBeUndefined()
                    expect(i.unlockingScript?.length).toBeGreaterThan(0)
                }
            }
            if (!noLog) console.log(log)
        }
    })

    test('11_includeInputs and lock', async () => {

        const wallet = new NinjaWallet(ccnr.ninja)

        {
            let log = `\n${testName()}\n`
            const args: sdk.ListActionsArgs = {
                includeInputs: true,
                includeInputSourceLockingScripts: true,
                labels: []
            }
            const r = await wallet.listActions(args)
            log += `totalActions=${r.totalActions} actions=${r.actions.length}\n`
            let i = 0
            for (const a of r.actions) {
                log += `${i++} ${a.txid} ${a.satoshis} ${a.status} ${a.isOutgoing} ${a.version} ${a.lockTime} ${a.description}\n`
                expect(a.isOutgoing === true || a.isOutgoing === false).toBe(true)
                expect(a.outputs).toBeUndefined()
                expect(Array.isArray(a.inputs)).toBe(true)
                expect(a.labels).toBeUndefined()
                for (const i of a.inputs!) {
                    log += `  ${i.sourceOutpoint}\n`
                    log += `    ${i.sourceLockingScript?.length} ${i.sourceLockingScript}\n`
                    expect(i.sourceLockingScript?.length).toBeGreaterThan(0)
                    expect(i.unlockingScript).toBeUndefined()
                }
            }
            if (!noLog) console.log(log)
        }
    })
})